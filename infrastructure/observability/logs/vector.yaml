---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: vector
  namespace: infra-observability
spec:
  interval: 1h30m
  url: https://helm.vector.dev
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: vector
  namespace: infra-observability
spec:
  interval: 10m0s
  driftDetection:
    mode: enabled
  chart:
    spec:
      chart: vector
      version: 0.41.x
      sourceRef:
        kind: HelmRepository
        name: vector
        namespace: infra-observability
      interval: 10m0s
  values:
    role: Agent

    podMonitor:
      enabled: true
      relabelings:
        - action: replace
          targetLabel: cluster
          replacement: ${clusterName}

    podLabels: null

    env:
      - name: VECTOR_COLOR
        value: never
      - name: VECTOR_LOG_FORMAT
        value: json

    ingress:
      enabled: true
      className: traefik
      hosts:
        - host: ${vectorSplunkHostName}
          paths:
            - path: /
              pathType: ImplementationSpecific
              port:
                number: 8088
    
    customConfig:
      data_dir: /vector-data-dir

      api:
        enabled: true
        address: 127.0.0.1:8686
        playground: false

      enrichment_tables:
        geoip:
          type: geoip
          path: /var/geoip/GeoLite2-City.mmdb

      sources:

        kubernetes_logs_raw:
          type: kubernetes_logs
          namespace_annotation_fields:
            namespace_labels: ""
          node_annotation_fields:
            node_labels: ""
          pod_annotation_fields:
            container_id: ""
            container_image: ""
            container_image_id: ""
            pod_annotations: ""
            pod_ip: ""
            pod_ips: ""
            pod_uid: ""

        external_logs_raw:
          type: splunk_hec
          address: 0.0.0.0:8088

        internal_metrics:
          type: internal_metrics

      transforms:

        external_logs:
          type: remap
          inputs:
            - external_logs_raw
          source: |
            res, err = parse_regex(
              string!(.tag),
              r'(?P<node>([^/]*))/(?P<container>.*)'
            )
            if err == null {
              .node = res.node
              .container = res.container
              .pod = .container
              del(.tag)
            }
            .namespace = "external"
            if exists(.line) {
              .message = del(.line)
            }
            del(.host)

        kubernetes_logs:
          type: remap
          inputs:
            - kubernetes_logs_raw
          drop_on_abort: true
          source: |
            .node = del(.kubernetes.pod_node_name)
            .namespace = del(.kubernetes.pod_namespace)
            .pod = del(.kubernetes.pod_name)
            .container = del(.kubernetes.container_name)

            del(.file)
            del(.kubernetes)

            # Filter kube probe access logs
            if match(string!(.message), r'kube-probe/\d\.\d+') {
              abort
            }

        processed_logs:
          type: remap
          inputs:
            - kubernetes_logs
            - external_logs
          source: |
            res = null
            err = null
            if includes([
                "tempo",
                "grafana",
                "loki",
                "cilium-agent",
                "cilium-operator",
                "node-exporter",
                "fritzbox_exp",
                "blackbox_exp",
                "crowdsec",
            ], string!(.container)) || match_any(string!(.pod), [
                r'hubble-.*',
                r'alertmanager-.*',
                r'kube-prometheus-stack-operator-.*'
            ]) {
              res, err = parse_logfmt(string!(.message))
            } else if !is_object(.message) {
              res, err = parse_json(string!(.message)) ??
                         parse_klog(string!(.message))
            } else {
              res = .message
            }
            if err == null {
              del(.message)
              payload = {}
              # transform all json keys to snake_case
              for_each(object!(res)) -> |key, val| {
                 payload = set!(payload, path: [snakecase(key)], data: val)
              }
              .payload = payload
            } else {
              .payload = del(.message)
            }

            if exists(.payload.level) {
              .level = downcase(string!(del(.payload.level)))
            }

        crowdsec_event_logs_raw:
          type: filter
          inputs:
            - processed_logs
          condition: |
            .container == "crowdsec" && exists(.payload.msg) && match_any(string!(.payload.msg), [r'ban on', r'performed'])

        crowdsec_event_logs:
          type: remap
          inputs:
            - crowdsec_event_logs_raw
          source: |
            res, err = parse_regex(string!(.msg), r'.*\) (?P<scenario>[^ ]*) by ip (?P<ip>[^ ]*) \((?P<country>[^\/]*)/(?P<postal_code>[^\)]*)\) : (?P<duration>[^ ]*) (?P<action>[^ ]*) on .*') ??
                       parse_regex(string!(.msg), r'Ip (?P<ip>[^ ]*) (?P<action>[^ ]*) \'(?P<scenario>[^\']*)\' \((?P<events>\d+) events over (?P<duration>[^ ]*)\).*')
            if err != null {
              abort
            }
            .event = res
            res, err = get_entrichment_table_record("geoip", {"ip": .payload.event.ip})
            if err != null {
              abort
            }
            .event.geoip = filter(object!(res)) -> |key, _val| {
              includes(["city_name", "continent_code", "country_code", "latitude", "longitude", "postal_code"], key) {
            }
            del(.payload)
            .container = "crowdsec:events"

      sinks:

        prom_exporter:
          type: prometheus_exporter
          inputs: 
            - internal_metrics
          address: 0.0.0.0:9090

        loki:
          type: loki
          endpoint: http://loki:3100
          inputs:
            - processed_logs
            - crowdsec_event_logs
          encoding:
            codec: json
          labels:
            cluster: ${clusterName}
            node: '{{ "{{ node }}" }}'
            namespace: '{{ "{{ namespace }}" }}'
            pod: '{{ "{{ pod }}" }}'
            container: '{{ "{{ container }}" }}'
          remove_label_fields: true

    extraVolumes:
      - name: geoip-mmdb
        emptyDir: {}

    extraVolumeMounts:
      - name: geoip-mmdb
        mountPath: /var/geoip
        readOnly: true

    initContainers:
      - name: geoip-download
        image: maxmindinc/geoipupdate:latest
        securityContext:
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          privileged: false
          allowPrivilegeEscalation: false
          seccompProfile: 
            type: RuntimeDefault
          capabilities:
            drop:
            - ALL
        envFrom:
          - secretRef:
              name: geoip-account-config
        volumeMounts:
          - name: geoip-mmdb
            mountPath: /usr/share/GeoIP

